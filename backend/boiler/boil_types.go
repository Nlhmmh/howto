// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("boiler: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type UsersType string

// Enum values for UsersType
const (
	UsersTypeCreator UsersType = "creator"
	UsersTypeViewer  UsersType = "viewer"
)

func AllUsersType() []UsersType {
	return []UsersType{
		UsersTypeCreator,
		UsersTypeViewer,
	}
}

func (e UsersType) IsValid() error {
	switch e {
	case UsersTypeCreator, UsersTypeViewer:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersType) String() string {
	return string(e)
}

type UsersRole string

// Enum values for UsersRole
const (
	UsersRoleUser  UsersRole = "user"
	UsersRoleAdmin UsersRole = "admin"
)

func AllUsersRole() []UsersRole {
	return []UsersRole{
		UsersRoleUser,
		UsersRoleAdmin,
	}
}

func (e UsersRole) IsValid() error {
	switch e {
	case UsersRoleUser, UsersRoleAdmin:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersRole) String() string {
	return string(e)
}

type UsersStatus string

// Enum values for UsersStatus
const (
	UsersStatusTemporary   UsersStatus = "temporary"
	UsersStatusActive      UsersStatus = "active"
	UsersStatusSuspended   UsersStatus = "suspended"
	UsersStatusDeactivated UsersStatus = "deactivated"
)

func AllUsersStatus() []UsersStatus {
	return []UsersStatus{
		UsersStatusTemporary,
		UsersStatusActive,
		UsersStatusSuspended,
		UsersStatusDeactivated,
	}
}

func (e UsersStatus) IsValid() error {
	switch e {
	case UsersStatusTemporary, UsersStatusActive, UsersStatusSuspended, UsersStatusDeactivated:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersStatus) String() string {
	return string(e)
}
