// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContentChild is an object representing the database table.
type ContentChild struct {
	ContentID uint      `boil:"content_id" json:"contentID" toml:"contentID" yaml:"contentID"`
	OrderNo   int16     `boil:"order_no" json:"orderNo" toml:"orderNo" yaml:"orderNo"`
	HTML      string    `boil:"html" json:"html" toml:"html" yaml:"html"`
	ImageURL  string    `boil:"image_url" json:"imageURL" toml:"imageURL" yaml:"imageURL"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt null.Time `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *contentChildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentChildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentChildColumns = struct {
	ContentID string
	OrderNo   string
	HTML      string
	ImageURL  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ContentID: "content_id",
	OrderNo:   "order_no",
	HTML:      "html",
	ImageURL:  "image_url",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ContentChildTableColumns = struct {
	ContentID string
	OrderNo   string
	HTML      string
	ImageURL  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ContentID: "content_childs.content_id",
	OrderNo:   "content_childs.order_no",
	HTML:      "content_childs.html",
	ImageURL:  "content_childs.image_url",
	CreatedAt: "content_childs.created_at",
	UpdatedAt: "content_childs.updated_at",
	DeletedAt: "content_childs.deleted_at",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ContentChildWhere = struct {
	ContentID whereHelperuint
	OrderNo   whereHelperint16
	HTML      whereHelperstring
	ImageURL  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ContentID: whereHelperuint{field: "`content_childs`.`content_id`"},
	OrderNo:   whereHelperint16{field: "`content_childs`.`order_no`"},
	HTML:      whereHelperstring{field: "`content_childs`.`html`"},
	ImageURL:  whereHelperstring{field: "`content_childs`.`image_url`"},
	CreatedAt: whereHelpertime_Time{field: "`content_childs`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`content_childs`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`content_childs`.`deleted_at`"},
}

// ContentChildRels is where relationship names are stored.
var ContentChildRels = struct {
	Content string
}{
	Content: "Content",
}

// contentChildR is where relationships are stored.
type contentChildR struct {
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
}

// NewStruct creates a new relationship struct
func (*contentChildR) NewStruct() *contentChildR {
	return &contentChildR{}
}

func (r *contentChildR) GetContent() *Content {
	if r == nil {
		return nil
	}
	return r.Content
}

// contentChildL is where Load methods for each relationship are stored.
type contentChildL struct{}

var (
	contentChildAllColumns            = []string{"content_id", "order_no", "html", "image_url", "created_at", "updated_at", "deleted_at"}
	contentChildColumnsWithoutDefault = []string{"content_id", "order_no", "html", "image_url", "deleted_at"}
	contentChildColumnsWithDefault    = []string{"created_at", "updated_at"}
	contentChildPrimaryKeyColumns     = []string{"content_id", "order_no"}
	contentChildGeneratedColumns      = []string{}
)

type (
	// ContentChildSlice is an alias for a slice of pointers to ContentChild.
	// This should almost always be used instead of []ContentChild.
	ContentChildSlice []*ContentChild
	// ContentChildHook is the signature for custom ContentChild hook methods
	ContentChildHook func(context.Context, boil.ContextExecutor, *ContentChild) error

	contentChildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentChildType                 = reflect.TypeOf(&ContentChild{})
	contentChildMapping              = queries.MakeStructMapping(contentChildType)
	contentChildPrimaryKeyMapping, _ = queries.BindMapping(contentChildType, contentChildMapping, contentChildPrimaryKeyColumns)
	contentChildInsertCacheMut       sync.RWMutex
	contentChildInsertCache          = make(map[string]insertCache)
	contentChildUpdateCacheMut       sync.RWMutex
	contentChildUpdateCache          = make(map[string]updateCache)
	contentChildUpsertCacheMut       sync.RWMutex
	contentChildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentChildAfterSelectHooks []ContentChildHook

var contentChildBeforeInsertHooks []ContentChildHook
var contentChildAfterInsertHooks []ContentChildHook

var contentChildBeforeUpdateHooks []ContentChildHook
var contentChildAfterUpdateHooks []ContentChildHook

var contentChildBeforeDeleteHooks []ContentChildHook
var contentChildAfterDeleteHooks []ContentChildHook

var contentChildBeforeUpsertHooks []ContentChildHook
var contentChildAfterUpsertHooks []ContentChildHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContentChild) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContentChild) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContentChild) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContentChild) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContentChild) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContentChild) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContentChild) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContentChild) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContentChild) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentChildAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentChildHook registers your hook function for all future operations.
func AddContentChildHook(hookPoint boil.HookPoint, contentChildHook ContentChildHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentChildAfterSelectHooks = append(contentChildAfterSelectHooks, contentChildHook)
	case boil.BeforeInsertHook:
		contentChildBeforeInsertHooks = append(contentChildBeforeInsertHooks, contentChildHook)
	case boil.AfterInsertHook:
		contentChildAfterInsertHooks = append(contentChildAfterInsertHooks, contentChildHook)
	case boil.BeforeUpdateHook:
		contentChildBeforeUpdateHooks = append(contentChildBeforeUpdateHooks, contentChildHook)
	case boil.AfterUpdateHook:
		contentChildAfterUpdateHooks = append(contentChildAfterUpdateHooks, contentChildHook)
	case boil.BeforeDeleteHook:
		contentChildBeforeDeleteHooks = append(contentChildBeforeDeleteHooks, contentChildHook)
	case boil.AfterDeleteHook:
		contentChildAfterDeleteHooks = append(contentChildAfterDeleteHooks, contentChildHook)
	case boil.BeforeUpsertHook:
		contentChildBeforeUpsertHooks = append(contentChildBeforeUpsertHooks, contentChildHook)
	case boil.AfterUpsertHook:
		contentChildAfterUpsertHooks = append(contentChildAfterUpsertHooks, contentChildHook)
	}
}

// OneG returns a single contentChild record from the query using the global executor.
func (q contentChildQuery) OneG(ctx context.Context) (*ContentChild, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contentChild record from the query.
func (q contentChildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContentChild, error) {
	o := &ContentChild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for content_childs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ContentChild records from the query using the global executor.
func (q contentChildQuery) AllG(ctx context.Context) (ContentChildSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ContentChild records from the query.
func (q contentChildQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentChildSlice, error) {
	var o []*ContentChild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ContentChild slice")
	}

	if len(contentChildAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ContentChild records in the query using the global executor
func (q contentChildQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ContentChild records in the query.
func (q contentChildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count content_childs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contentChildQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contentChildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if content_childs exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *ContentChild) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentChildL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentChild interface{}, mods queries.Applicator) error {
	var slice []*ContentChild
	var object *ContentChild

	if singular {
		var ok bool
		object, ok = maybeContentChild.(*ContentChild)
		if !ok {
			object = new(ContentChild)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentChild))
			}
		}
	} else {
		s, ok := maybeContentChild.(*[]*ContentChild)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentChild))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentChildR{}
		}
		args = append(args, object.ContentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentChildR{}
			}

			for _, a := range args {
				if a == obj.ContentID {
					continue Outer
				}
			}

			args = append(args, obj.ContentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contents`),
		qm.WhereIn(`contents.id in ?`, args...),
		qmhelper.WhereIsNull(`contents.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contents")
	}

	if len(contentChildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				break
			}
		}
	}

	return nil
}

// SetContentG of the contentChild to the related item.
// Sets o.R.Content to related.
// Uses the global database handle.
func (o *ContentChild) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the contentChild to the related item.
// Sets o.R.Content to related.
func (o *ContentChild) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `content_childs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
		strmangle.WhereClause("`", "`", 0, contentChildPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ContentID, o.OrderNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &contentChildR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	return nil
}

// ContentChilds retrieves all the records using an executor.
func ContentChilds(mods ...qm.QueryMod) contentChildQuery {
	mods = append(mods, qm.From("`content_childs`"), qmhelper.WhereIsNull("`content_childs`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`content_childs`.*"})
	}

	return contentChildQuery{q}
}

// FindContentChildG retrieves a single record by ID.
func FindContentChildG(ctx context.Context, contentID uint, orderNo int16, selectCols ...string) (*ContentChild, error) {
	return FindContentChild(ctx, boil.GetContextDB(), contentID, orderNo, selectCols...)
}

// FindContentChild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentChild(ctx context.Context, exec boil.ContextExecutor, contentID uint, orderNo int16, selectCols ...string) (*ContentChild, error) {
	contentChildObj := &ContentChild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `content_childs` where `content_id`=? AND `order_no`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, contentID, orderNo)

	err := q.Bind(ctx, exec, contentChildObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from content_childs")
	}

	if err = contentChildObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentChildObj, err
	}

	return contentChildObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ContentChild) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentChild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no content_childs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentChildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentChildInsertCacheMut.RLock()
	cache, cached := contentChildInsertCache[key]
	contentChildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentChildAllColumns,
			contentChildColumnsWithDefault,
			contentChildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentChildType, contentChildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentChildType, contentChildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `content_childs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `content_childs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `content_childs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, contentChildPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into content_childs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ContentID,
		o.OrderNo,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for content_childs")
	}

CacheNoHooks:
	if !cached {
		contentChildInsertCacheMut.Lock()
		contentChildInsertCache[key] = cache
		contentChildInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ContentChild record using the global executor.
// See Update for more documentation.
func (o *ContentChild) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ContentChild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentChild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentChildUpdateCacheMut.RLock()
	cache, cached := contentChildUpdateCache[key]
	contentChildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentChildAllColumns,
			contentChildPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update content_childs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `content_childs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, contentChildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentChildType, contentChildMapping, append(wl, contentChildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update content_childs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for content_childs")
	}

	if !cached {
		contentChildUpdateCacheMut.Lock()
		contentChildUpdateCache[key] = cache
		contentChildUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contentChildQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contentChildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for content_childs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for content_childs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContentChildSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentChildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `content_childs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentChildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in contentChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all contentChild")
	}
	return rowsAff, nil
}

// DeleteG deletes a single ContentChild record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ContentChild) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single ContentChild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentChild) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ContentChild provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentChildPrimaryKeyMapping)
		sql = "DELETE FROM `content_childs` WHERE `content_id`=? AND `order_no`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `content_childs` SET %s WHERE `content_id`=? AND `order_no`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(contentChildType, contentChildMapping, append(wl, contentChildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from content_childs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for content_childs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contentChildQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q contentChildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no contentChildQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from content_childs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for content_childs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContentChildSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentChildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentChildBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentChildPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `content_childs` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentChildPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentChildPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `content_childs` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentChildPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from contentChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for content_childs")
	}

	if len(contentChildAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ContentChild) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no ContentChild provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentChild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContentChild(ctx, exec, o.ContentID, o.OrderNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentChildSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty ContentChildSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentChildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentChildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `content_childs`.* FROM `content_childs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentChildPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ContentChildSlice")
	}

	*o = slice

	return nil
}

// ContentChildExistsG checks if the ContentChild row exists.
func ContentChildExistsG(ctx context.Context, contentID uint, orderNo int16) (bool, error) {
	return ContentChildExists(ctx, boil.GetContextDB(), contentID, orderNo)
}

// ContentChildExists checks if the ContentChild row exists.
func ContentChildExists(ctx context.Context, exec boil.ContextExecutor, contentID uint, orderNo int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `content_childs` where `content_id`=? AND `order_no`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contentID, orderNo)
	}
	row := exec.QueryRowContext(ctx, sql, contentID, orderNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if content_childs exists")
	}

	return exists, nil
}
