// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContentHTML is an object representing the database table.
type ContentHTML struct {
	ContentID string    `boil:"content_id" json:"contentID" toml:"contentID" yaml:"contentID"`
	OrderNo   int16     `boil:"order_no" json:"orderNo" toml:"orderNo" yaml:"orderNo"`
	HTML      string    `boil:"html" json:"html" toml:"html" yaml:"html"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt null.Time `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *contentHTMLR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentHTMLL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentHTMLColumns = struct {
	ContentID string
	OrderNo   string
	HTML      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ContentID: "content_id",
	OrderNo:   "order_no",
	HTML:      "html",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ContentHTMLTableColumns = struct {
	ContentID string
	OrderNo   string
	HTML      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ContentID: "content_htmls.content_id",
	OrderNo:   "content_htmls.order_no",
	HTML:      "content_htmls.html",
	CreatedAt: "content_htmls.created_at",
	UpdatedAt: "content_htmls.updated_at",
	DeletedAt: "content_htmls.deleted_at",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ContentHTMLWhere = struct {
	ContentID whereHelperstring
	OrderNo   whereHelperint16
	HTML      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ContentID: whereHelperstring{field: "`content_htmls`.`content_id`"},
	OrderNo:   whereHelperint16{field: "`content_htmls`.`order_no`"},
	HTML:      whereHelperstring{field: "`content_htmls`.`html`"},
	CreatedAt: whereHelpertime_Time{field: "`content_htmls`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`content_htmls`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`content_htmls`.`deleted_at`"},
}

// ContentHTMLRels is where relationship names are stored.
var ContentHTMLRels = struct {
	Content string
}{
	Content: "Content",
}

// contentHTMLR is where relationships are stored.
type contentHTMLR struct {
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
}

// NewStruct creates a new relationship struct
func (*contentHTMLR) NewStruct() *contentHTMLR {
	return &contentHTMLR{}
}

func (r *contentHTMLR) GetContent() *Content {
	if r == nil {
		return nil
	}
	return r.Content
}

// contentHTMLL is where Load methods for each relationship are stored.
type contentHTMLL struct{}

var (
	contentHTMLAllColumns            = []string{"content_id", "order_no", "html", "created_at", "updated_at", "deleted_at"}
	contentHTMLColumnsWithoutDefault = []string{"content_id", "order_no", "html", "deleted_at"}
	contentHTMLColumnsWithDefault    = []string{"created_at", "updated_at"}
	contentHTMLPrimaryKeyColumns     = []string{"content_id", "order_no"}
	contentHTMLGeneratedColumns      = []string{}
)

type (
	// ContentHTMLSlice is an alias for a slice of pointers to ContentHTML.
	// This should almost always be used instead of []ContentHTML.
	ContentHTMLSlice []*ContentHTML
	// ContentHTMLHook is the signature for custom ContentHTML hook methods
	ContentHTMLHook func(context.Context, boil.ContextExecutor, *ContentHTML) error

	contentHTMLQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentHTMLType                 = reflect.TypeOf(&ContentHTML{})
	contentHTMLMapping              = queries.MakeStructMapping(contentHTMLType)
	contentHTMLPrimaryKeyMapping, _ = queries.BindMapping(contentHTMLType, contentHTMLMapping, contentHTMLPrimaryKeyColumns)
	contentHTMLInsertCacheMut       sync.RWMutex
	contentHTMLInsertCache          = make(map[string]insertCache)
	contentHTMLUpdateCacheMut       sync.RWMutex
	contentHTMLUpdateCache          = make(map[string]updateCache)
	contentHTMLUpsertCacheMut       sync.RWMutex
	contentHTMLUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentHTMLAfterSelectHooks []ContentHTMLHook

var contentHTMLBeforeInsertHooks []ContentHTMLHook
var contentHTMLAfterInsertHooks []ContentHTMLHook

var contentHTMLBeforeUpdateHooks []ContentHTMLHook
var contentHTMLAfterUpdateHooks []ContentHTMLHook

var contentHTMLBeforeDeleteHooks []ContentHTMLHook
var contentHTMLAfterDeleteHooks []ContentHTMLHook

var contentHTMLBeforeUpsertHooks []ContentHTMLHook
var contentHTMLAfterUpsertHooks []ContentHTMLHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContentHTML) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContentHTML) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContentHTML) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContentHTML) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContentHTML) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContentHTML) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContentHTML) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContentHTML) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContentHTML) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentHTMLAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentHTMLHook registers your hook function for all future operations.
func AddContentHTMLHook(hookPoint boil.HookPoint, contentHTMLHook ContentHTMLHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentHTMLAfterSelectHooks = append(contentHTMLAfterSelectHooks, contentHTMLHook)
	case boil.BeforeInsertHook:
		contentHTMLBeforeInsertHooks = append(contentHTMLBeforeInsertHooks, contentHTMLHook)
	case boil.AfterInsertHook:
		contentHTMLAfterInsertHooks = append(contentHTMLAfterInsertHooks, contentHTMLHook)
	case boil.BeforeUpdateHook:
		contentHTMLBeforeUpdateHooks = append(contentHTMLBeforeUpdateHooks, contentHTMLHook)
	case boil.AfterUpdateHook:
		contentHTMLAfterUpdateHooks = append(contentHTMLAfterUpdateHooks, contentHTMLHook)
	case boil.BeforeDeleteHook:
		contentHTMLBeforeDeleteHooks = append(contentHTMLBeforeDeleteHooks, contentHTMLHook)
	case boil.AfterDeleteHook:
		contentHTMLAfterDeleteHooks = append(contentHTMLAfterDeleteHooks, contentHTMLHook)
	case boil.BeforeUpsertHook:
		contentHTMLBeforeUpsertHooks = append(contentHTMLBeforeUpsertHooks, contentHTMLHook)
	case boil.AfterUpsertHook:
		contentHTMLAfterUpsertHooks = append(contentHTMLAfterUpsertHooks, contentHTMLHook)
	}
}

// OneG returns a single contentHTML record from the query using the global executor.
func (q contentHTMLQuery) OneG(ctx context.Context) (*ContentHTML, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contentHTML record from the query.
func (q contentHTMLQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContentHTML, error) {
	o := &ContentHTML{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for content_htmls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ContentHTML records from the query using the global executor.
func (q contentHTMLQuery) AllG(ctx context.Context) (ContentHTMLSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ContentHTML records from the query.
func (q contentHTMLQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentHTMLSlice, error) {
	var o []*ContentHTML

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ContentHTML slice")
	}

	if len(contentHTMLAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ContentHTML records in the query using the global executor
func (q contentHTMLQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ContentHTML records in the query.
func (q contentHTMLQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count content_htmls rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contentHTMLQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contentHTMLQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if content_htmls exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *ContentHTML) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentHTMLL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentHTML interface{}, mods queries.Applicator) error {
	var slice []*ContentHTML
	var object *ContentHTML

	if singular {
		var ok bool
		object, ok = maybeContentHTML.(*ContentHTML)
		if !ok {
			object = new(ContentHTML)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentHTML)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentHTML))
			}
		}
	} else {
		s, ok := maybeContentHTML.(*[]*ContentHTML)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentHTML)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentHTML))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentHTMLR{}
		}
		args = append(args, object.ContentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentHTMLR{}
			}

			for _, a := range args {
				if a == obj.ContentID {
					continue Outer
				}
			}

			args = append(args, obj.ContentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contents`),
		qm.WhereIn(`contents.id in ?`, args...),
		qmhelper.WhereIsNull(`contents.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contents")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				break
			}
		}
	}

	return nil
}

// SetContentG of the contentHTML to the related item.
// Sets o.R.Content to related.
// Uses the global database handle.
func (o *ContentHTML) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the contentHTML to the related item.
// Sets o.R.Content to related.
func (o *ContentHTML) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `content_htmls` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
		strmangle.WhereClause("`", "`", 0, contentHTMLPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ContentID, o.OrderNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &contentHTMLR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	return nil
}

// ContentHTMLS retrieves all the records using an executor.
func ContentHTMLS(mods ...qm.QueryMod) contentHTMLQuery {
	mods = append(mods, qm.From("`content_htmls`"), qmhelper.WhereIsNull("`content_htmls`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`content_htmls`.*"})
	}

	return contentHTMLQuery{q}
}

// FindContentHTMLG retrieves a single record by ID.
func FindContentHTMLG(ctx context.Context, contentID string, orderNo int16, selectCols ...string) (*ContentHTML, error) {
	return FindContentHTML(ctx, boil.GetContextDB(), contentID, orderNo, selectCols...)
}

// FindContentHTML retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentHTML(ctx context.Context, exec boil.ContextExecutor, contentID string, orderNo int16, selectCols ...string) (*ContentHTML, error) {
	contentHTMLObj := &ContentHTML{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `content_htmls` where `content_id`=? AND `order_no`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, contentID, orderNo)

	err := q.Bind(ctx, exec, contentHTMLObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from content_htmls")
	}

	if err = contentHTMLObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentHTMLObj, err
	}

	return contentHTMLObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ContentHTML) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentHTML) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no content_htmls provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentHTMLColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentHTMLInsertCacheMut.RLock()
	cache, cached := contentHTMLInsertCache[key]
	contentHTMLInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentHTMLAllColumns,
			contentHTMLColumnsWithDefault,
			contentHTMLColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `content_htmls` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `content_htmls` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `content_htmls` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, contentHTMLPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into content_htmls")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ContentID,
		o.OrderNo,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for content_htmls")
	}

CacheNoHooks:
	if !cached {
		contentHTMLInsertCacheMut.Lock()
		contentHTMLInsertCache[key] = cache
		contentHTMLInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ContentHTML record using the global executor.
// See Update for more documentation.
func (o *ContentHTML) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ContentHTML.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentHTML) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentHTMLUpdateCacheMut.RLock()
	cache, cached := contentHTMLUpdateCache[key]
	contentHTMLUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentHTMLAllColumns,
			contentHTMLPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update content_htmls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `content_htmls` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, contentHTMLPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, append(wl, contentHTMLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update content_htmls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for content_htmls")
	}

	if !cached {
		contentHTMLUpdateCacheMut.Lock()
		contentHTMLUpdateCache[key] = cache
		contentHTMLUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contentHTMLQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contentHTMLQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for content_htmls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for content_htmls")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContentHTMLSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentHTMLSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentHTMLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `content_htmls` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentHTMLPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in contentHTML slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all contentHTML")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ContentHTML) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLContentHTMLUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentHTML) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no content_htmls provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentHTMLColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLContentHTMLUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentHTMLUpsertCacheMut.RLock()
	cache, cached := contentHTMLUpsertCache[key]
	contentHTMLUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contentHTMLAllColumns,
			contentHTMLColumnsWithDefault,
			contentHTMLColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentHTMLAllColumns,
			contentHTMLPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert content_htmls, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`content_htmls`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `content_htmls` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for content_htmls")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(contentHTMLType, contentHTMLMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for content_htmls")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for content_htmls")
	}

CacheNoHooks:
	if !cached {
		contentHTMLUpsertCacheMut.Lock()
		contentHTMLUpsertCache[key] = cache
		contentHTMLUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ContentHTML record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ContentHTML) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single ContentHTML record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentHTML) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ContentHTML provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentHTMLPrimaryKeyMapping)
		sql = "DELETE FROM `content_htmls` WHERE `content_id`=? AND `order_no`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `content_htmls` SET %s WHERE `content_id`=? AND `order_no`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(contentHTMLType, contentHTMLMapping, append(wl, contentHTMLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from content_htmls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for content_htmls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contentHTMLQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q contentHTMLQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no contentHTMLQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from content_htmls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for content_htmls")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContentHTMLSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentHTMLSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentHTMLBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentHTMLPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `content_htmls` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentHTMLPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentHTMLPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `content_htmls` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentHTMLPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from contentHTML slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for content_htmls")
	}

	if len(contentHTMLAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ContentHTML) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no ContentHTML provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentHTML) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContentHTML(ctx, exec, o.ContentID, o.OrderNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentHTMLSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty ContentHTMLSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentHTMLSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentHTMLSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentHTMLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `content_htmls`.* FROM `content_htmls` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentHTMLPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ContentHTMLSlice")
	}

	*o = slice

	return nil
}

// ContentHTMLExistsG checks if the ContentHTML row exists.
func ContentHTMLExistsG(ctx context.Context, contentID string, orderNo int16) (bool, error) {
	return ContentHTMLExists(ctx, boil.GetContextDB(), contentID, orderNo)
}

// ContentHTMLExists checks if the ContentHTML row exists.
func ContentHTMLExists(ctx context.Context, exec boil.ContextExecutor, contentID string, orderNo int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `content_htmls` where `content_id`=? AND `order_no`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contentID, orderNo)
	}
	row := exec.QueryRowContext(ctx, sql, contentID, orderNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if content_htmls exists")
	}

	return exists, nil
}

// Exists checks if the ContentHTML row exists.
func (o *ContentHTML) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContentHTMLExists(ctx, exec, o.ContentID, o.OrderNo)
}
