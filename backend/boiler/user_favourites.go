// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserFavourite is an object representing the database table.
type UserFavourite struct {
	UserID      string    `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`
	ContentID   string    `boil:"content_id" json:"contentID" toml:"contentID" yaml:"contentID"`
	IsFavourite bool      `boil:"is_favourite" json:"isFavourite" toml:"isFavourite" yaml:"isFavourite"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *userFavouriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userFavouriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserFavouriteColumns = struct {
	UserID      string
	ContentID   string
	IsFavourite string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	UserID:      "user_id",
	ContentID:   "content_id",
	IsFavourite: "is_favourite",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var UserFavouriteTableColumns = struct {
	UserID      string
	ContentID   string
	IsFavourite string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	UserID:      "user_favourites.user_id",
	ContentID:   "user_favourites.content_id",
	IsFavourite: "user_favourites.is_favourite",
	CreatedAt:   "user_favourites.created_at",
	UpdatedAt:   "user_favourites.updated_at",
	DeletedAt:   "user_favourites.deleted_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UserFavouriteWhere = struct {
	UserID      whereHelperstring
	ContentID   whereHelperstring
	IsFavourite whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	UserID:      whereHelperstring{field: "`user_favourites`.`user_id`"},
	ContentID:   whereHelperstring{field: "`user_favourites`.`content_id`"},
	IsFavourite: whereHelperbool{field: "`user_favourites`.`is_favourite`"},
	CreatedAt:   whereHelpertime_Time{field: "`user_favourites`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`user_favourites`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`user_favourites`.`deleted_at`"},
}

// UserFavouriteRels is where relationship names are stored.
var UserFavouriteRels = struct {
	User    string
	Content string
}{
	User:    "User",
	Content: "Content",
}

// userFavouriteR is where relationships are stored.
type userFavouriteR struct {
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
}

// NewStruct creates a new relationship struct
func (*userFavouriteR) NewStruct() *userFavouriteR {
	return &userFavouriteR{}
}

func (r *userFavouriteR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userFavouriteR) GetContent() *Content {
	if r == nil {
		return nil
	}
	return r.Content
}

// userFavouriteL is where Load methods for each relationship are stored.
type userFavouriteL struct{}

var (
	userFavouriteAllColumns            = []string{"user_id", "content_id", "is_favourite", "created_at", "updated_at", "deleted_at"}
	userFavouriteColumnsWithoutDefault = []string{"user_id", "content_id", "deleted_at"}
	userFavouriteColumnsWithDefault    = []string{"is_favourite", "created_at", "updated_at"}
	userFavouritePrimaryKeyColumns     = []string{"user_id", "content_id"}
	userFavouriteGeneratedColumns      = []string{}
)

type (
	// UserFavouriteSlice is an alias for a slice of pointers to UserFavourite.
	// This should almost always be used instead of []UserFavourite.
	UserFavouriteSlice []*UserFavourite
	// UserFavouriteHook is the signature for custom UserFavourite hook methods
	UserFavouriteHook func(context.Context, boil.ContextExecutor, *UserFavourite) error

	userFavouriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFavouriteType                 = reflect.TypeOf(&UserFavourite{})
	userFavouriteMapping              = queries.MakeStructMapping(userFavouriteType)
	userFavouritePrimaryKeyMapping, _ = queries.BindMapping(userFavouriteType, userFavouriteMapping, userFavouritePrimaryKeyColumns)
	userFavouriteInsertCacheMut       sync.RWMutex
	userFavouriteInsertCache          = make(map[string]insertCache)
	userFavouriteUpdateCacheMut       sync.RWMutex
	userFavouriteUpdateCache          = make(map[string]updateCache)
	userFavouriteUpsertCacheMut       sync.RWMutex
	userFavouriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userFavouriteAfterSelectHooks []UserFavouriteHook

var userFavouriteBeforeInsertHooks []UserFavouriteHook
var userFavouriteAfterInsertHooks []UserFavouriteHook

var userFavouriteBeforeUpdateHooks []UserFavouriteHook
var userFavouriteAfterUpdateHooks []UserFavouriteHook

var userFavouriteBeforeDeleteHooks []UserFavouriteHook
var userFavouriteAfterDeleteHooks []UserFavouriteHook

var userFavouriteBeforeUpsertHooks []UserFavouriteHook
var userFavouriteAfterUpsertHooks []UserFavouriteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserFavourite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserFavourite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserFavourite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserFavourite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserFavourite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserFavourite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserFavourite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserFavourite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserFavourite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavouriteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserFavouriteHook registers your hook function for all future operations.
func AddUserFavouriteHook(hookPoint boil.HookPoint, userFavouriteHook UserFavouriteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userFavouriteAfterSelectHooks = append(userFavouriteAfterSelectHooks, userFavouriteHook)
	case boil.BeforeInsertHook:
		userFavouriteBeforeInsertHooks = append(userFavouriteBeforeInsertHooks, userFavouriteHook)
	case boil.AfterInsertHook:
		userFavouriteAfterInsertHooks = append(userFavouriteAfterInsertHooks, userFavouriteHook)
	case boil.BeforeUpdateHook:
		userFavouriteBeforeUpdateHooks = append(userFavouriteBeforeUpdateHooks, userFavouriteHook)
	case boil.AfterUpdateHook:
		userFavouriteAfterUpdateHooks = append(userFavouriteAfterUpdateHooks, userFavouriteHook)
	case boil.BeforeDeleteHook:
		userFavouriteBeforeDeleteHooks = append(userFavouriteBeforeDeleteHooks, userFavouriteHook)
	case boil.AfterDeleteHook:
		userFavouriteAfterDeleteHooks = append(userFavouriteAfterDeleteHooks, userFavouriteHook)
	case boil.BeforeUpsertHook:
		userFavouriteBeforeUpsertHooks = append(userFavouriteBeforeUpsertHooks, userFavouriteHook)
	case boil.AfterUpsertHook:
		userFavouriteAfterUpsertHooks = append(userFavouriteAfterUpsertHooks, userFavouriteHook)
	}
}

// OneG returns a single userFavourite record from the query using the global executor.
func (q userFavouriteQuery) OneG(ctx context.Context) (*UserFavourite, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userFavourite record from the query.
func (q userFavouriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserFavourite, error) {
	o := &UserFavourite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_favourites")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserFavourite records from the query using the global executor.
func (q userFavouriteQuery) AllG(ctx context.Context) (UserFavouriteSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserFavourite records from the query.
func (q userFavouriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserFavouriteSlice, error) {
	var o []*UserFavourite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserFavourite slice")
	}

	if len(userFavouriteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserFavourite records in the query using the global executor
func (q userFavouriteQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserFavourite records in the query.
func (q userFavouriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_favourites rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userFavouriteQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userFavouriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_favourites exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserFavourite) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Content pointed to by the foreign key.
func (o *UserFavourite) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavouriteL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavourite interface{}, mods queries.Applicator) error {
	var slice []*UserFavourite
	var object *UserFavourite

	if singular {
		var ok bool
		object, ok = maybeUserFavourite.(*UserFavourite)
		if !ok {
			object = new(UserFavourite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFavourite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFavourite))
			}
		}
	} else {
		s, ok := maybeUserFavourite.(*[]*UserFavourite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFavourite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFavourite))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavouriteR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavouriteR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavouriteL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavourite interface{}, mods queries.Applicator) error {
	var slice []*UserFavourite
	var object *UserFavourite

	if singular {
		var ok bool
		object, ok = maybeUserFavourite.(*UserFavourite)
		if !ok {
			object = new(UserFavourite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFavourite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFavourite))
			}
		}
	} else {
		s, ok := maybeUserFavourite.(*[]*UserFavourite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFavourite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFavourite))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavouriteR{}
		}
		args = append(args, object.ContentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavouriteR{}
			}

			for _, a := range args {
				if a == obj.ContentID {
					continue Outer
				}
			}

			args = append(args, obj.ContentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contents`),
		qm.WhereIn(`contents.id in ?`, args...),
		qmhelper.WhereIsNull(`contents.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contents")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the userFavourite to the related item.
// Sets o.R.User to related.
// Uses the global database handle.
func (o *UserFavourite) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userFavourite to the related item.
// Sets o.R.User to related.
func (o *UserFavourite) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_favourites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userFavouritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ContentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userFavouriteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	return nil
}

// SetContentG of the userFavourite to the related item.
// Sets o.R.Content to related.
// Uses the global database handle.
func (o *UserFavourite) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the userFavourite to the related item.
// Sets o.R.Content to related.
func (o *UserFavourite) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_favourites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
		strmangle.WhereClause("`", "`", 0, userFavouritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ContentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &userFavouriteR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	return nil
}

// UserFavourites retrieves all the records using an executor.
func UserFavourites(mods ...qm.QueryMod) userFavouriteQuery {
	mods = append(mods, qm.From("`user_favourites`"), qmhelper.WhereIsNull("`user_favourites`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_favourites`.*"})
	}

	return userFavouriteQuery{q}
}

// FindUserFavouriteG retrieves a single record by ID.
func FindUserFavouriteG(ctx context.Context, userID string, contentID string, selectCols ...string) (*UserFavourite, error) {
	return FindUserFavourite(ctx, boil.GetContextDB(), userID, contentID, selectCols...)
}

// FindUserFavourite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserFavourite(ctx context.Context, exec boil.ContextExecutor, userID string, contentID string, selectCols ...string) (*UserFavourite, error) {
	userFavouriteObj := &UserFavourite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_favourites` where `user_id`=? AND `content_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, userID, contentID)

	err := q.Bind(ctx, exec, userFavouriteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_favourites")
	}

	if err = userFavouriteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userFavouriteObj, err
	}

	return userFavouriteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserFavourite) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserFavourite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_favourites provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavouriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userFavouriteInsertCacheMut.RLock()
	cache, cached := userFavouriteInsertCache[key]
	userFavouriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userFavouriteAllColumns,
			userFavouriteColumnsWithDefault,
			userFavouriteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_favourites` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_favourites` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_favourites` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userFavouritePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_favourites")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.ContentID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for user_favourites")
	}

CacheNoHooks:
	if !cached {
		userFavouriteInsertCacheMut.Lock()
		userFavouriteInsertCache[key] = cache
		userFavouriteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserFavourite record using the global executor.
// See Update for more documentation.
func (o *UserFavourite) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserFavourite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserFavourite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userFavouriteUpdateCacheMut.RLock()
	cache, cached := userFavouriteUpdateCache[key]
	userFavouriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userFavouriteAllColumns,
			userFavouritePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_favourites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_favourites` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userFavouritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, append(wl, userFavouritePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_favourites row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_favourites")
	}

	if !cached {
		userFavouriteUpdateCacheMut.Lock()
		userFavouriteUpdateCache[key] = cache
		userFavouriteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userFavouriteQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userFavouriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_favourites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_favourites")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserFavouriteSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserFavouriteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavouritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_favourites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFavouritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userFavourite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userFavourite")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserFavourite) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLUserFavouriteUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserFavourite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_favourites provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavouriteColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserFavouriteUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userFavouriteUpsertCacheMut.RLock()
	cache, cached := userFavouriteUpsertCache[key]
	userFavouriteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userFavouriteAllColumns,
			userFavouriteColumnsWithDefault,
			userFavouriteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userFavouriteAllColumns,
			userFavouritePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_favourites, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_favourites`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_favourites` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for user_favourites")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userFavouriteType, userFavouriteMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for user_favourites")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for user_favourites")
	}

CacheNoHooks:
	if !cached {
		userFavouriteUpsertCacheMut.Lock()
		userFavouriteUpsertCache[key] = cache
		userFavouriteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserFavourite record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserFavourite) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single UserFavourite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserFavourite) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserFavourite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userFavouritePrimaryKeyMapping)
		sql = "DELETE FROM `user_favourites` WHERE `user_id`=? AND `content_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_favourites` SET %s WHERE `user_id`=? AND `content_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userFavouriteType, userFavouriteMapping, append(wl, userFavouritePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_favourites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_favourites")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userFavouriteQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q userFavouriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userFavouriteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_favourites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_favourites")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserFavouriteSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserFavouriteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userFavouriteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavouritePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_favourites` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFavouritePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavouritePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_favourites` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFavouritePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userFavourite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_favourites")
	}

	if len(userFavouriteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserFavourite) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no UserFavourite provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserFavourite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserFavourite(ctx, exec, o.UserID, o.ContentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFavouriteSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty UserFavouriteSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFavouriteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserFavouriteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavouritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_favourites`.* FROM `user_favourites` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userFavouritePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserFavouriteSlice")
	}

	*o = slice

	return nil
}

// UserFavouriteExistsG checks if the UserFavourite row exists.
func UserFavouriteExistsG(ctx context.Context, userID string, contentID string) (bool, error) {
	return UserFavouriteExists(ctx, boil.GetContextDB(), userID, contentID)
}

// UserFavouriteExists checks if the UserFavourite row exists.
func UserFavouriteExists(ctx context.Context, exec boil.ContextExecutor, userID string, contentID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_favourites` where `user_id`=? AND `content_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, contentID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, contentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_favourites exists")
	}

	return exists, nil
}

// Exists checks if the UserFavourite row exists.
func (o *UserFavourite) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserFavouriteExists(ctx, exec, o.UserID, o.ContentID)
}
