// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ContentsCategory string

// Enum values for ContentsCategory
const (
	ContentsCategoryCooking    ContentsCategory = "cooking"
	ContentsCategoryHandcrafts ContentsCategory = "handcrafts"
	ContentsCategoryEducation  ContentsCategory = "education"
	ContentsCategoryKnowledge  ContentsCategory = "knowledge"
)

func (e ContentsCategory) IsValid() error {
	switch e {
	case ContentsCategoryCooking, ContentsCategoryHandcrafts, ContentsCategoryEducation, ContentsCategoryKnowledge:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ContentsCategory) String() string {
	return string(e)
}

type SystemUsersRole string

// Enum values for SystemUsersRole
const (
	SystemUsersRoleAdmin SystemUsersRole = "admin"
	SystemUsersRoleStaff SystemUsersRole = "staff"
)

func (e SystemUsersRole) IsValid() error {
	switch e {
	case SystemUsersRoleAdmin, SystemUsersRoleStaff:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e SystemUsersRole) String() string {
	return string(e)
}

type UsersAccountType string

// Enum values for UsersAccountType
const (
	UsersAccountTypeCreater UsersAccountType = "creater"
	UsersAccountTypeViewer  UsersAccountType = "viewer"
)

func (e UsersAccountType) IsValid() error {
	switch e {
	case UsersAccountTypeCreater, UsersAccountTypeViewer:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersAccountType) String() string {
	return string(e)
}

type UsersAccountStatus string

// Enum values for UsersAccountStatus
const (
	UsersAccountStatusTemporary   UsersAccountStatus = "temporary"
	UsersAccountStatusActive      UsersAccountStatus = "active"
	UsersAccountStatusSuspended   UsersAccountStatus = "suspended"
	UsersAccountStatusDeactivated UsersAccountStatus = "deactivated"
)

func (e UsersAccountStatus) IsValid() error {
	switch e {
	case UsersAccountStatusTemporary, UsersAccountStatusActive, UsersAccountStatusSuspended, UsersAccountStatusDeactivated:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersAccountStatus) String() string {
	return string(e)
}
