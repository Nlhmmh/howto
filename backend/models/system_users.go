// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SystemUser is an object representing the database table.
type SystemUser struct {
	ID        uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	LoginName string    `boil:"login_name" json:"loginName" toml:"loginName" yaml:"loginName"`
	Password  string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	Role      string    `boil:"role" json:"role" toml:"role" yaml:"role"`
	CreatedAt null.Time `boil:"created_at" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *systemUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemUserColumns = struct {
	ID        string
	LoginName string
	Password  string
	Role      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	LoginName: "login_name",
	Password:  "password",
	Role:      "role",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var SystemUserTableColumns = struct {
	ID        string
	LoginName string
	Password  string
	Role      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "system_users.id",
	LoginName: "system_users.login_name",
	Password:  "system_users.password",
	Role:      "system_users.role",
	CreatedAt: "system_users.created_at",
	UpdatedAt: "system_users.updated_at",
	DeletedAt: "system_users.deleted_at",
}

// Generated where

var SystemUserWhere = struct {
	ID        whereHelperuint
	LoginName whereHelperstring
	Password  whereHelperstring
	Role      whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperuint{field: "`system_users`.`id`"},
	LoginName: whereHelperstring{field: "`system_users`.`login_name`"},
	Password:  whereHelperstring{field: "`system_users`.`password`"},
	Role:      whereHelperstring{field: "`system_users`.`role`"},
	CreatedAt: whereHelpernull_Time{field: "`system_users`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`system_users`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`system_users`.`deleted_at`"},
}

// SystemUserRels is where relationship names are stored.
var SystemUserRels = struct {
}{}

// systemUserR is where relationships are stored.
type systemUserR struct {
}

// NewStruct creates a new relationship struct
func (*systemUserR) NewStruct() *systemUserR {
	return &systemUserR{}
}

// systemUserL is where Load methods for each relationship are stored.
type systemUserL struct{}

var (
	systemUserAllColumns            = []string{"id", "login_name", "password", "role", "created_at", "updated_at", "deleted_at"}
	systemUserColumnsWithoutDefault = []string{"login_name", "password", "deleted_at"}
	systemUserColumnsWithDefault    = []string{"id", "role", "created_at", "updated_at"}
	systemUserPrimaryKeyColumns     = []string{"id"}
	systemUserGeneratedColumns      = []string{}
)

type (
	// SystemUserSlice is an alias for a slice of pointers to SystemUser.
	// This should almost always be used instead of []SystemUser.
	SystemUserSlice []*SystemUser
	// SystemUserHook is the signature for custom SystemUser hook methods
	SystemUserHook func(context.Context, boil.ContextExecutor, *SystemUser) error

	systemUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemUserType                 = reflect.TypeOf(&SystemUser{})
	systemUserMapping              = queries.MakeStructMapping(systemUserType)
	systemUserPrimaryKeyMapping, _ = queries.BindMapping(systemUserType, systemUserMapping, systemUserPrimaryKeyColumns)
	systemUserInsertCacheMut       sync.RWMutex
	systemUserInsertCache          = make(map[string]insertCache)
	systemUserUpdateCacheMut       sync.RWMutex
	systemUserUpdateCache          = make(map[string]updateCache)
	systemUserUpsertCacheMut       sync.RWMutex
	systemUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var systemUserAfterSelectHooks []SystemUserHook

var systemUserBeforeInsertHooks []SystemUserHook
var systemUserAfterInsertHooks []SystemUserHook

var systemUserBeforeUpdateHooks []SystemUserHook
var systemUserAfterUpdateHooks []SystemUserHook

var systemUserBeforeDeleteHooks []SystemUserHook
var systemUserAfterDeleteHooks []SystemUserHook

var systemUserBeforeUpsertHooks []SystemUserHook
var systemUserAfterUpsertHooks []SystemUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SystemUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SystemUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SystemUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SystemUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SystemUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SystemUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SystemUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SystemUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SystemUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSystemUserHook registers your hook function for all future operations.
func AddSystemUserHook(hookPoint boil.HookPoint, systemUserHook SystemUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		systemUserAfterSelectHooks = append(systemUserAfterSelectHooks, systemUserHook)
	case boil.BeforeInsertHook:
		systemUserBeforeInsertHooks = append(systemUserBeforeInsertHooks, systemUserHook)
	case boil.AfterInsertHook:
		systemUserAfterInsertHooks = append(systemUserAfterInsertHooks, systemUserHook)
	case boil.BeforeUpdateHook:
		systemUserBeforeUpdateHooks = append(systemUserBeforeUpdateHooks, systemUserHook)
	case boil.AfterUpdateHook:
		systemUserAfterUpdateHooks = append(systemUserAfterUpdateHooks, systemUserHook)
	case boil.BeforeDeleteHook:
		systemUserBeforeDeleteHooks = append(systemUserBeforeDeleteHooks, systemUserHook)
	case boil.AfterDeleteHook:
		systemUserAfterDeleteHooks = append(systemUserAfterDeleteHooks, systemUserHook)
	case boil.BeforeUpsertHook:
		systemUserBeforeUpsertHooks = append(systemUserBeforeUpsertHooks, systemUserHook)
	case boil.AfterUpsertHook:
		systemUserAfterUpsertHooks = append(systemUserAfterUpsertHooks, systemUserHook)
	}
}

// OneG returns a single systemUser record from the query using the global executor.
func (q systemUserQuery) OneG(ctx context.Context) (*SystemUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single systemUser record from the query.
func (q systemUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SystemUser, error) {
	o := &SystemUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for system_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SystemUser records from the query using the global executor.
func (q systemUserQuery) AllG(ctx context.Context) (SystemUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SystemUser records from the query.
func (q systemUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (SystemUserSlice, error) {
	var o []*SystemUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SystemUser slice")
	}

	if len(systemUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SystemUser records in the query, and panics on error.
func (q systemUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SystemUser records in the query.
func (q systemUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count system_users rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q systemUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q systemUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if system_users exists")
	}

	return count > 0, nil
}

// SystemUsers retrieves all the records using an executor.
func SystemUsers(mods ...qm.QueryMod) systemUserQuery {
	mods = append(mods, qm.From("`system_users`"), qmhelper.WhereIsNull("`system_users`.`deleted_at`"))
	return systemUserQuery{NewQuery(mods...)}
}

// FindSystemUserG retrieves a single record by ID.
func FindSystemUserG(ctx context.Context, iD uint, selectCols ...string) (*SystemUser, error) {
	return FindSystemUser(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSystemUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystemUser(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*SystemUser, error) {
	systemUserObj := &SystemUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `system_users` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, systemUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from system_users")
	}

	if err = systemUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return systemUserObj, err
	}

	return systemUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SystemUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SystemUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no system_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemUserInsertCacheMut.RLock()
	cache, cached := systemUserInsertCache[key]
	systemUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemUserAllColumns,
			systemUserColumnsWithDefault,
			systemUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemUserType, systemUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemUserType, systemUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `system_users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `system_users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `system_users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, systemUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into system_users")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == systemUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for system_users")
	}

CacheNoHooks:
	if !cached {
		systemUserInsertCacheMut.Lock()
		systemUserInsertCache[key] = cache
		systemUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SystemUser record using the global executor.
// See Update for more documentation.
func (o *SystemUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SystemUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SystemUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	systemUserUpdateCacheMut.RLock()
	cache, cached := systemUserUpdateCache[key]
	systemUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemUserAllColumns,
			systemUserPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update system_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `system_users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, systemUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemUserType, systemUserMapping, append(wl, systemUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update system_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for system_users")
	}

	if !cached {
		systemUserUpdateCacheMut.Lock()
		systemUserUpdateCache[key] = cache
		systemUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q systemUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q systemUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for system_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for system_users")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SystemUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `system_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, systemUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in systemUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all systemUser")
	}
	return rowsAff, nil
}

// DeleteG deletes a single SystemUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SystemUser) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single SystemUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SystemUser) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SystemUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemUserPrimaryKeyMapping)
		sql = "DELETE FROM `system_users` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `system_users` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(systemUserType, systemUserMapping, append(wl, systemUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from system_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for system_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q systemUserQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q systemUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no systemUserQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from system_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_users")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SystemUserSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(systemUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemUserPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `system_users` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, systemUserPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemUserPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `system_users` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, systemUserPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from systemUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_users")
	}

	if len(systemUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SystemUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no SystemUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SystemUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSystemUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SystemUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `system_users`.* FROM `system_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, systemUserPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SystemUserSlice")
	}

	*o = slice

	return nil
}

// SystemUserExistsG checks if the SystemUser row exists.
func SystemUserExistsG(ctx context.Context, iD uint) (bool, error) {
	return SystemUserExists(ctx, boil.GetContextDB(), iD)
}

// SystemUserExists checks if the SystemUser row exists.
func SystemUserExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `system_users` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if system_users exists")
	}

	return exists, nil
}
