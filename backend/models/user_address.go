// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAddress is an object representing the database table.
type UserAddress struct {
	ID          uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      uint      `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`
	AddressName string    `boil:"address_name" json:"addressName" toml:"addressName" yaml:"addressName"`
	PostCode    string    `boil:"post_code" json:"postCode" toml:"postCode" yaml:"postCode"`
	Address1    string    `boil:"address1" json:"address1" toml:"address1" yaml:"address1"`
	Address2    string    `boil:"address2" json:"address2" toml:"address2" yaml:"address2"`
	Address3    string    `boil:"address3" json:"address3" toml:"address3" yaml:"address3"`
	CreatedAt   null.Time `boil:"created_at" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *userAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAddressColumns = struct {
	ID          string
	UserID      string
	AddressName string
	PostCode    string
	Address1    string
	Address2    string
	Address3    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	AddressName: "address_name",
	PostCode:    "post_code",
	Address1:    "address1",
	Address2:    "address2",
	Address3:    "address3",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// Generated where

var UserAddressWhere = struct {
	ID          whereHelperuint
	UserID      whereHelperuint
	AddressName whereHelperstring
	PostCode    whereHelperstring
	Address1    whereHelperstring
	Address2    whereHelperstring
	Address3    whereHelperstring
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperuint{field: "`user_address`.`id`"},
	UserID:      whereHelperuint{field: "`user_address`.`user_id`"},
	AddressName: whereHelperstring{field: "`user_address`.`address_name`"},
	PostCode:    whereHelperstring{field: "`user_address`.`post_code`"},
	Address1:    whereHelperstring{field: "`user_address`.`address1`"},
	Address2:    whereHelperstring{field: "`user_address`.`address2`"},
	Address3:    whereHelperstring{field: "`user_address`.`address3`"},
	CreatedAt:   whereHelpernull_Time{field: "`user_address`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`user_address`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`user_address`.`deleted_at`"},
}

// UserAddressRels is where relationship names are stored.
var UserAddressRels = struct {
	User              string
	AddressUserOrders string
}{
	User:              "User",
	AddressUserOrders: "AddressUserOrders",
}

// userAddressR is where relationships are stored.
type userAddressR struct {
	User              *User          `boil:"User" json:"User" toml:"User" yaml:"User"`
	AddressUserOrders UserOrderSlice `boil:"AddressUserOrders" json:"AddressUserOrders" toml:"AddressUserOrders" yaml:"AddressUserOrders"`
}

// NewStruct creates a new relationship struct
func (*userAddressR) NewStruct() *userAddressR {
	return &userAddressR{}
}

// userAddressL is where Load methods for each relationship are stored.
type userAddressL struct{}

var (
	userAddressAllColumns            = []string{"id", "user_id", "address_name", "post_code", "address1", "address2", "address3", "created_at", "updated_at", "deleted_at"}
	userAddressColumnsWithoutDefault = []string{"user_id", "post_code", "address1", "address2", "address3", "updated_at", "deleted_at"}
	userAddressColumnsWithDefault    = []string{"id", "address_name", "created_at"}
	userAddressPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserAddressSlice is an alias for a slice of pointers to UserAddress.
	// This should generally be used opposed to []UserAddress.
	UserAddressSlice []*UserAddress
	// UserAddressHook is the signature for custom UserAddress hook methods
	UserAddressHook func(context.Context, boil.ContextExecutor, *UserAddress) error

	userAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAddressType                 = reflect.TypeOf(&UserAddress{})
	userAddressMapping              = queries.MakeStructMapping(userAddressType)
	userAddressPrimaryKeyMapping, _ = queries.BindMapping(userAddressType, userAddressMapping, userAddressPrimaryKeyColumns)
	userAddressInsertCacheMut       sync.RWMutex
	userAddressInsertCache          = make(map[string]insertCache)
	userAddressUpdateCacheMut       sync.RWMutex
	userAddressUpdateCache          = make(map[string]updateCache)
	userAddressUpsertCacheMut       sync.RWMutex
	userAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAddressBeforeInsertHooks []UserAddressHook
var userAddressBeforeUpdateHooks []UserAddressHook
var userAddressBeforeDeleteHooks []UserAddressHook
var userAddressBeforeUpsertHooks []UserAddressHook

var userAddressAfterInsertHooks []UserAddressHook
var userAddressAfterSelectHooks []UserAddressHook
var userAddressAfterUpdateHooks []UserAddressHook
var userAddressAfterDeleteHooks []UserAddressHook
var userAddressAfterUpsertHooks []UserAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAddressHook registers your hook function for all future operations.
func AddUserAddressHook(hookPoint boil.HookPoint, userAddressHook UserAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAddressBeforeInsertHooks = append(userAddressBeforeInsertHooks, userAddressHook)
	case boil.BeforeUpdateHook:
		userAddressBeforeUpdateHooks = append(userAddressBeforeUpdateHooks, userAddressHook)
	case boil.BeforeDeleteHook:
		userAddressBeforeDeleteHooks = append(userAddressBeforeDeleteHooks, userAddressHook)
	case boil.BeforeUpsertHook:
		userAddressBeforeUpsertHooks = append(userAddressBeforeUpsertHooks, userAddressHook)
	case boil.AfterInsertHook:
		userAddressAfterInsertHooks = append(userAddressAfterInsertHooks, userAddressHook)
	case boil.AfterSelectHook:
		userAddressAfterSelectHooks = append(userAddressAfterSelectHooks, userAddressHook)
	case boil.AfterUpdateHook:
		userAddressAfterUpdateHooks = append(userAddressAfterUpdateHooks, userAddressHook)
	case boil.AfterDeleteHook:
		userAddressAfterDeleteHooks = append(userAddressAfterDeleteHooks, userAddressHook)
	case boil.AfterUpsertHook:
		userAddressAfterUpsertHooks = append(userAddressAfterUpsertHooks, userAddressHook)
	}
}

// OneG returns a single userAddress record from the query using the global executor.
func (q userAddressQuery) OneG(ctx context.Context) (*UserAddress, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userAddress record from the query.
func (q userAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAddress, error) {
	o := &UserAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserAddress records from the query using the global executor.
func (q userAddressQuery) AllG(ctx context.Context) (UserAddressSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserAddress records from the query.
func (q userAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAddressSlice, error) {
	var o []*UserAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserAddress slice")
	}

	if len(userAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserAddress records in the query, and panics on error.
func (q userAddressQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserAddress records in the query.
func (q userAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_address rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userAddressQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_address exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserAddress) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// AddressUserOrders retrieves all the user_order's UserOrders with an executor via address_id column.
func (o *UserAddress) AddressUserOrders(mods ...qm.QueryMod) userOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_order`.`address_id`=?", o.ID),
		qmhelper.WhereIsNull("`user_order`.`deleted_at`"),
	)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "`user_order`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_order`.*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAddressL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAddress interface{}, mods queries.Applicator) error {
	var slice []*UserAddress
	var object *UserAddress

	if singular {
		object = maybeUserAddress.(*UserAddress)
	} else {
		slice = *maybeUserAddress.(*[]*UserAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAddressR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAddressR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadAddressUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userAddressL) LoadAddressUserOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAddress interface{}, mods queries.Applicator) error {
	var slice []*UserAddress
	var object *UserAddress

	if singular {
		object = maybeUserAddress.(*UserAddress)
	} else {
		slice = *maybeUserAddress.(*[]*UserAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAddressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAddressR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_order`),
		qm.WhereIn(`user_order.address_id in ?`, args...),
		qmhelper.WhereIsNull(`user_order.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_order")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressUserOrders = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AddressID {
				local.R.AddressUserOrders = append(local.R.AddressUserOrders, foreign)
				break
			}
		}
	}

	return nil
}

// SetUserG of the userAddress to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAddresses.
// Uses the global database handle.
func (o *UserAddress) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userAddress to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAddresses.
func (o *UserAddress) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userAddressR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAddresses: UserAddressSlice{o},
		}
	} else {
		related.R.UserAddresses = append(related.R.UserAddresses, o)
	}

	return nil
}

// AddAddressUserOrdersG adds the given related objects to the existing relationships
// of the user_address, optionally inserting them as new records.
// Appends related to o.R.AddressUserOrders.
// Sets related.R.Address appropriately.
// Uses the global database handle.
func (o *UserAddress) AddAddressUserOrdersG(ctx context.Context, insert bool, related ...*UserOrder) error {
	return o.AddAddressUserOrders(ctx, boil.GetContextDB(), insert, related...)
}

// AddAddressUserOrders adds the given related objects to the existing relationships
// of the user_address, optionally inserting them as new records.
// Appends related to o.R.AddressUserOrders.
// Sets related.R.Address appropriately.
func (o *UserAddress) AddAddressUserOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_order` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
				strmangle.WhereClause("`", "`", 0, userOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userAddressR{
			AddressUserOrders: related,
		}
	} else {
		o.R.AddressUserOrders = append(o.R.AddressUserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrderR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// UserAddresses retrieves all the records using an executor.
func UserAddresses(mods ...qm.QueryMod) userAddressQuery {
	mods = append(mods, qm.From("`user_address`"), qmhelper.WhereIsNull("`user_address`.`deleted_at`"))
	return userAddressQuery{NewQuery(mods...)}
}

// FindUserAddressG retrieves a single record by ID.
func FindUserAddressG(ctx context.Context, iD uint, selectCols ...string) (*UserAddress, error) {
	return FindUserAddress(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUserAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAddress(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*UserAddress, error) {
	userAddressObj := &UserAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_address` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_address")
	}

	return userAddressObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserAddress) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAddressInsertCacheMut.RLock()
	cache, cached := userAddressInsertCache[key]
	userAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAddressAllColumns,
			userAddressColumnsWithDefault,
			userAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAddressType, userAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAddressType, userAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_address")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userAddressMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_address")
	}

CacheNoHooks:
	if !cached {
		userAddressInsertCacheMut.Lock()
		userAddressInsertCache[key] = cache
		userAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserAddress record using the global executor.
// See Update for more documentation.
func (o *UserAddress) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAddressUpdateCacheMut.RLock()
	cache, cached := userAddressUpdateCache[key]
	userAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAddressAllColumns,
			userAddressPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAddressType, userAddressMapping, append(wl, userAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_address")
	}

	if !cached {
		userAddressUpdateCacheMut.Lock()
		userAddressUpdateCache[key] = cache
		userAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userAddressQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_address")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserAddressSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userAddress")
	}
	return rowsAff, nil
}

// DeleteG deletes a single UserAddress record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserAddress) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single UserAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAddress) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAddressPrimaryKeyMapping)
		sql = "DELETE FROM `user_address` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_address` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userAddressType, userAddressMapping, append(wl, userAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userAddressQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q userAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userAddressQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_address")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserAddressSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_address` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAddressPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_address` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAddressPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_address")
	}

	if len(userAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserAddress) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserAddress provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAddressSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserAddressSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_address`.* FROM `user_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAddressPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserAddressSlice")
	}

	*o = slice

	return nil
}

// UserAddressExistsG checks if the UserAddress row exists.
func UserAddressExistsG(ctx context.Context, iD uint) (bool, error) {
	return UserAddressExists(ctx, boil.GetContextDB(), iD)
}

// UserAddressExists checks if the UserAddress row exists.
func UserAddressExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_address` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_address exists")
	}

	return exists, nil
}
